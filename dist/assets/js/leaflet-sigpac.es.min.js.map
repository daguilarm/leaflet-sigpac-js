{"version":3,"file":"leaflet-sigpac.es.min.js","sources":["../../../src/core/EventEmitter.js","../../../src/core/LogManager.js","../../../src/core/CacheManager.js","../../../src/core/SigpacService.js","../../../src/config.js","../../../src/core/ConfigManager.js","../../../src/core/LayerManager.js","../../../src/core/PopupManager.js","../../../src/core/utils/lib-loader.js","../../../src/core/GeometryManager.js","../../../src/core/EventManager.js","../../../src/core/MapManager.js","../../../src/index.js"],"sourcesContent":["/**\n * Lightweight event bus for component communication.\n * @class\n */\nexport default class EventEmitter {\n\n  constructor() {\n    this.events = new Map();\n  }\n\n  /**\n   * Registers an event listener.\n   */\n  on(event, listener) {\n    if (!this.events.has(event)) {\n      this.events.set(event, new Set());\n    }\n    this.events.get(event).add(listener);\n  }\n\n  /**\n   * Emits an event with data.\n   */\n  emit(event, data) {\n    if (this.events.has(event)) {\n      this.events.get(event).forEach(listener => listener(data));\n    }\n  }\n\n  /**\n   * Removes an event listener.\n   */\n  off(event, listener) {\n    if (this.events.has(event)) {\n      const listeners = this.events.get(event);\n      listeners.delete(listener);\n      if (listeners.size === 0) {\n        this.events.delete(event);\n      }\n    }\n  }\n\n  /**\n   * Removes all event listeners.\n   */\n  offAll() {\n    this.events.clear();\n  }\n}","/** \n * Log levels ordered by severity \n */\nconst LOG_LEVELS = ['debug', 'info', 'warn', 'error'];\n\n/**\n * Configurable logger with severity filtering\n */\nexport default class Logger {\n\n  constructor(debug = false) {\n    this.currentLevel = debug ? 'debug' : 'warn';\n  }\n\n  /**\n   * Set minimum log level\n   */\n  setLogLevel(level) {\n    if (LOG_LEVELS.includes(level)) {\n      this.currentLevel = level;\n    }\n  }\n\n  /**\n   * Log debug message\n   */\n  debug(message, data = null) {\n    this.#log('debug', message, data);\n  }\n\n  /**\n   * Log info message\n   */\n  info(message, data = null) {\n    this.#log('info', message, data);\n  }\n\n  /**\n   * Log warning message\n   */\n  warn(message, data = null) {\n    this.#log('warn', message, data);\n  }\n\n  /**\n   * Log error message\n   */\n  error(message, error = null) {\n    this.#log('error', message, error);\n  }\n\n  /**\n   * Internal log handler\n   * @private\n   */\n  #log(level, message, data) {\n    if (this.#shouldLog(level)) {\n      const logFn = console[level] || console.log;\n      const prefix = `[SIGPAC-${level.toUpperCase()}]`;\n      \n      if (data) {\n        logFn(`${prefix} ${message}`, data);\n      } else {\n        logFn(`${prefix} ${message}`);\n      }\n    }\n  }\n\n  /**\n   * Determine if message should be logged\n   * @private\n   */\n  #shouldLog(level) {\n    return LOG_LEVELS.indexOf(level) >= LOG_LEVELS.indexOf(this.currentLevel);\n  }\n}","/**\n * Coordinates-based cache with TTL expiration and size limits\n */\nexport default class CoordinateCache {\n  \n  constructor(config) { \n    this.cache = new Map();// Coordinates-based cache with TTL expiration and size limits\n    this.config = config;\n    this.accessOrder = []; // For implementing LRU policy\n  }\n\n  /**\n   * Get cached value for coordinates\n   */\n  get(latlng) {\n    const key = this.#generateKey(latlng);\n    const entry = this.cache.get(key);\n    \n    if (entry) {\n      // Verificar expiración\n      if (Date.now() - entry.timestamp < this.config.ttl) {\n        // Update access order (LRU)\n        this.#updateAccessOrder(key);\n        return entry.data;\n      }\n      \n      // Remove expired entry\n      this.cache.delete(key);\n      this.#removeFromAccessOrder(key);\n    }\n    \n    return undefined;\n  }\n\n  /**\n   * Set cache value for coordinates\n   */\n  set(latlng, data) {\n    if (!this.config.enabled) return;\n    \n    const key = this.#generateKey(latlng);\n    \n    // Apply LRU policy if maximum size is exceeded\n    if (this.accessOrder.length >= this.config.maxSize) {\n      const lruKey = this.accessOrder.shift();\n      this.cache.delete(lruKey);\n    }\n    \n    this.cache.set(key, {\n      data,\n      timestamp: Date.now()\n    });\n    \n    this.#updateAccessOrder(key);\n  }\n\n  /** \n   * Clears entire cache \n   */\n  clear() {\n    this.cache.clear();\n    this.accessOrder = [];\n  }\n\n  /**\n   * Generate cache key from coordinates\n   * @private \n   */\n  #generateKey(latlng) {\n    return `${latlng.lat.toFixed(this.config.precision)}_${latlng.lng.toFixed(this.config.precision)}`;\n  }\n\n  /**\n   * Update access order for LRU policy\n   * @private\n   */ \n  #updateAccessOrder(key) {\n    // Eliminar cualquier ocurrencia previa\n    this.#removeFromAccessOrder(key);\n    // Agregar al final (más reciente)\n    this.accessOrder.push(key);\n  }\n\n  /**\n   * Remove key from access order\n   */\n  #removeFromAccessOrder(key) {\n    const index = this.accessOrder.indexOf(key);\n    if (index !== -1) {\n      this.accessOrder.splice(index, 1);\n    }\n  }\n}","import CoordinateCache from './CacheManager.js';\n\n/**\n * Service for SIGPAC API interactions with caching\n */\nexport default class SigpacService {\n\n  constructor(config, logger) {\n    this.config = config;\n    this.logger = logger;\n    // Initialize cache with configuration\n    this.cache = new CoordinateCache(this.config.cacheConfig);\n    \n    this.logger.info(`Cache initialized: ${this.config.cacheConfig.enabled ? \n      `Enabled (TTL: ${this.config.cacheConfig.ttl}ms, Size: ${this.config.cacheConfig.maxSize})` : \n      'Disabled'}`\n    );\n  }\n\n  /**\n   * Fetch SIGPAC data by coordinates\n   */\n  async fetchParcelaByCoordinates(latlng) {\n    // Check if the cache is enabled\n    if (this.config.cacheConfig.enabled) {\n      const cached = this.cache.get(latlng);\n      if (cached) {\n        this.logger.debug('Using cached SIGPAC data');\n        return cached;\n      }\n    }\n\n    // Fetch data from API\n    try {\n      const url = this.#buildQueryUrl(latlng);\n      this.logger.info(\"Fetching SIGPAC data\", { url });\n      \n      const response = await fetch(url, { \n        headers: { 'Accept': 'application/json' },\n        signal: AbortSignal.timeout(10000)\n      });\n      \n      // Check response status\n      if (!response.ok) {\n        const errorBody = await response.text();\n        throw new Error(`HTTP ${response.status}: ${errorBody.substring(0, 100)}`);\n      }\n      \n      const data = await response.json();\n      const processed = this.#processResponse(data);\n      \n      // Store in cache only if enabled and we have valid data\n      if (processed && this.config.cacheConfig.enabled) {\n        this.cache.set(latlng, processed);\n      }\n      \n      return processed;\n      \n    } catch (error) { // SIGPAC fetch error\n      this.logger.error('SIGPAC fetch error', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Build query URL from coordinates\n   * @private Builds query URL from coordinates\n   */\n  #buildQueryUrl(latlng) {\n    const lat = latlng.lat.toFixed(6);\n    const lon = latlng.lng.toFixed(6);\n    return `${this.config.sigpacCoordinateQueryUrl}4326/${lon}/${lat}.json`;\n  }\n\n  /**\n   * Processes API response\n   * @private\n   */\n  #processResponse(data) {\n    if (Array.isArray(data) && data.length > 0) {\n      return this.#parseSigpacData(data[0]);\n    }\n    return null;\n  }\n\n  /**\n   * Parses raw SIGPAC data\n   * @private\n   */\n  #parseSigpacData(parcela) {\n    try {\n      this.logger.debug(\"Parsing SIGPAC data\", parcela);\n      return {\n        provincia: parcela.provincia || 'N/A',\n        municipio: parcela.municipio || 'N/A',\n        zona: parcela.zona || 0,\n        poligono: parcela.poligono,\n        parcela: parcela.parcela,\n        recinto: parcela.recinto,\n        uso: parcela.uso_sigpac || 'N/A',\n        superficie: this.#calculateSurface(parcela.dn_surface),\n        cultivo: 'N/A',\n        pendiente: parcela.pendiente_media || 'N/A',\n        regadio: parcela.coef_regadio || 'N/A',\n        incidencias: parcela.incidencias || 'N/A',\n        admisibilidad: parcela.admisibilidad || 'N/A',\n        wkt: parcela.wkt,\n        srid: parcela.srid,\n      };\n    } catch (error) {\n      this.logger.error(\"SIGPAC parse error\", error);\n      return null;\n    }\n  }\n\n  /**\n   * Calculates surface in hectares\n   * @private\n   */\n  #calculateSurface(dn_surface) {\n    if (!dn_surface) return 'N/A';\n    \n    const superficieValue = dn_surface / 10000;\n    return !isNaN(superficieValue) ? superficieValue.toFixed(2) : 'N/A';\n  }\n}","/**\n * Base configuration constants\n * @type {BaseConfig}\n */\nexport const baseDefaultConfig = {\n  debug: false,\n  livewire: false,\n  livewireEvent: 'sigpacFeatureSelected',\n  sigpacWmsUrl: 'https://sigpac-hubcloud.es/wms',\n  sigpacLayerName: 'recinto',\n  sigpacCoordinateQueryUrl: 'https://sigpac-hubcloud.es/servicioconsultassigpac/query/recinfobypoint/',\n  minZoomFeature: 12,\n  defaultMapOptions: {\n    center: [40.416775, -3.703790],\n    zoom: 13,\n    maxZoom: 19,\n    minZoom: 5,\n    tileUrl: 'https://tms-pnoa-ma.idee.es/1.0.0/pnoa-ma/{z}/{x}/{-y}.jpeg',\n    attribution: '<a href=\"https://www.scne.es/\">CC BY 4.0 scne.es</a>'\n  },\n  \n  // Configuración de caché\n  cacheConfig: {\n    enabled: true,\n    ttl: 300000, // 5 minutos\n    maxSize: 100,\n    precision: 4\n  },\n  \n  // URLs para librerías externas (carga bajo demanda)\n  externalLibs: {\n    terraformer: {\n      url: 'https://unpkg.com/terraformer@1.0.9/terraformer.js',\n      integrity: 'sha384-7e0rV8XjC1y0KZxlB+4O7w8n2gxV6Z7u6z5p5z5z5z5z5z5z5z5z5z5z5z5z5z5'\n    },\n    terraformerWkt: {\n      url: 'https://unpkg.com/terraformer-wkt-parser@1.2.1/terraformer-wkt-parser.min.js',\n      integrity: 'sha384-7e0rV8XjC1y0KZxlB+4O7w8n2gxV6Z7u6z5p5z5z5z5z5z5z5z5z5z5z5z5z5z5'\n    }\n  },\n  \n  // Iconos para estados\n  markerLoadingIcon: L.icon({\n    iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-gold.png',\n    iconSize: [25, 41],\n    iconAnchor: [12, 41],\n    popupAnchor: [1, -34]\n  }),\n  markerErrorIcon: L.icon({\n    iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png',\n    iconSize: [25, 41],\n    iconAnchor: [12, 41],\n    popupAnchor: [1, -34]\n  })\n};\n\n/**\n * Complete default configuration\n * @type {FullConfig}\n */\nexport const defaultConfig = {\n  ...baseDefaultConfig,\n  hideLeafletAttribution: false,\n  interactionMode: 'popup',\n  initialFeatures: [],\n  popupFields: null,\n  markerIconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon.png',\n  clickEnabled: true\n};","import { defaultConfig } from '../config.js';\n\n/**\n * Centralizes configuration management with deep merging capabilities\n */\nexport default class ConfigManager {\n\n  constructor(userConfig = {}) {\n    this.userConfig = userConfig;\n  }\n\n  /**\n   * Merges default configuration with user-provided options\n   */\n  getConfig() {\n    // First-level merge\n    const mergedConfig = { ...defaultConfig, ...this.userConfig };\n    \n    // Extract top-level map options\n    const topLevelMapOptions = {};\n    const mapOptionKeys = [\n      'minZoom', 'maxZoom', 'center', 'zoom', 'tileUrl', 'attribution'\n    ];\n    \n    mapOptionKeys.forEach(key => {\n      if (this.userConfig[key] !== undefined) {\n        topLevelMapOptions[key] = this.userConfig[key];\n        delete mergedConfig[key];\n      }\n    });\n    \n    // Deep merge defaultMapOptions\n    mergedConfig.defaultMapOptions = {\n      ...defaultConfig.defaultMapOptions,\n      ...topLevelMapOptions,\n      ...(this.userConfig.defaultMapOptions || {}),\n    };\n    \n    return mergedConfig;\n  }\n}","/**\n * Manages map layers and tile configurations\n */\nexport default class LayerManager {\n\n  constructor(config, map) {\n    this.config = config;\n    this.map = map;\n    this.#setupAttribution();\n  }\n\n  /**\n   * Initialize base tile layer\n   */\n  initBaseLayer(options) {\n    this.baseLayer = L.tileLayer(options.tileUrl, {\n      maxZoom: options.maxZoom,\n      minZoom: options.minZoom\n    }).addTo(this.map);\n  }\n\n  /**\n   * Initialize SIGPAC WMS layer\n   */\n  initSigpacLayer() {\n    this.sigpacLayer = L.tileLayer.wms(this.config.sigpacWmsUrl, {\n      layers: this.config.sigpacLayerName,\n      format: 'image/png',\n      transparent: true,\n      version: '1.3.0',\n      maxZoom: this.config.defaultMapOptions.maxZoom,\n      minZoom: this.config.minZoomFeature,\n      tileSize: 512,\n      opacity: 0.7\n    });\n  }\n\n  /**\n   * Setup layer control interface\n   */\n  setupLayerControl() {\n    if (!this.baseLayer) return;\n    \n    L.control.layers(\n      { 'Base Layer': this.baseLayer },\n      { 'SIGPAC': this.sigpacLayer },\n      { collapsed: false }\n    ).addTo(this.map);\n  }\n\n  /**\n   * Configure map attribution\n   * @private\n   */\n  #setupAttribution() {\n    const attributionControl = this.map.attributionControl;\n    if (!attributionControl) return;\n    \n    if (this.config.hideLeafletAttribution) {\n      attributionControl.setPrefix('');\n    }\n    \n    if (this.config.defaultMapOptions.attribution) {\n      attributionControl.addAttribution(\n        this.config.defaultMapOptions.attribution\n      );\n    }\n  }\n}","/**\n * Handles popup creation and content management\n */\nexport default class PopupManager {\n  \n  constructor(map, config, geometryManager) {\n    this.map = map;\n    this.config = config;\n    this.geometryManager = geometryManager;\n    this.popupPool = [];\n  }\n  \n  /**\n   * Show loading indicator popup\n   */ \n  showLoadingPopup(latlng) {\n    return this.#createPopup(\n      latlng, \n      '<div class=\"sigpac-loading\">Loading SIGPAC data...</div>'\n    );\n  }\n\n  /**\n   * Show error popup\n   */ \n  showErrorPopup(latlng, message) {\n    this.map.closePopup();\n    return this.#createPopup(\n      latlng, \n      `<div class=\"sigpac-error\">${message}</div>`\n    );\n  }\n\n  /**\n   * Display parcel information\n   */ \n  showParcelaInfo(parcelaData, latlng) {\n    this.geometryManager.clearLayers();\n    const content = this.buildPopupContent(parcelaData);\n\n    switch (this.config.interactionMode) {\n      case 'marker':\n        this.#handleMarkerMode(parcelaData, latlng, content);\n        break;\n      case 'popup':\n        this.#createPopup(latlng, content);\n        break;\n    }\n  }\n\n  /**\n   * Build HTML content for parcel popup\n   */ \n  buildPopupContent(parcelaData) {\n    const safeGet = (value) => value ?? 'N/A';\n    const fields = this.getFieldsConfig(parcelaData);\n    \n    const rows = fields.map(field => `\n      <div class=\"sigpac-popup-row\">\n        <span class=\"sigpac-popup-label\">${field.label}</span>\n        <span class=\"sigpac-popup-value\">\n          ${safeGet(field.value)}${field.suffix ? ` ${field.suffix}` : ''}\n        </span>\n      </div>\n    `).join('');\n\n    return `\n      <div class=\"sigpac-popup\">\n        <div class=\"sigpac-popup-title\">SIGPAC Parcel</div>\n        <div class=\"sigpac-popup-content\">${rows}</div>\n      </div>\n    `;\n  }\n\n  /**\n   * Get field configuration \n   */\n  getFieldsConfig(parcelaData) {\n    if (this.config.popupFields) {\n      const fields = typeof this.config.popupFields === 'function' \n        ? this.config.popupFields(parcelaData)\n        : this.config.popupFields;\n      \n      return Array.isArray(fields) ? fields : [];\n    }\n    \n    // Default fields\n    return [\n      { label: 'Province:', value: parcelaData.provincia },\n      { label: 'Municipality:', value: parcelaData.municipio },\n      { label: 'Polygon:', value: parcelaData.poligono },\n      { label: 'Parcel:', value: parcelaData.parcela },\n      { label: 'Enclosure:', value: parcelaData.recinto },\n      { label: 'Use:', value: parcelaData.uso },\n      { label: 'Surface:', value: parcelaData.superficie, suffix: 'ha' }\n    ];\n  }\n\n  /**\n   * Handle marker interaction mode \n   * @private \n   */ \n  #handleMarkerMode(parcelaData, latlng, content) {\n    const marker = this.geometryManager.addMarker(latlng, {\n      title: `Parcela SIGPAC: ${parcelaData.poligono}-${parcelaData.parcela}`\n    });\n    \n    marker.parcelaData = parcelaData;\n    this.geometryManager.bindPopup(marker, content);\n  }\n\n  /**\n   * Creates or reuses a popup instance.\n   * @private\n   */\n  #createPopup(latlng, content) {\n    // Reuse popup from pool if available\n    const popup = this.popupPool.pop() || L.popup();\n    \n    popup\n      .setLatLng(latlng)\n      .setContent(content)\n      .openOn(this.map);\n    \n    // Return to pool when closed\n    popup.on('remove', () => {\n      this.popupPool.push(popup);\n    });\n    \n    return popup;\n  }\n}","/**\n * Helper para cargar scripts externos\n * @class\n */\nexport default class ScriptLoader {\n  /**\n   * Carga una librería externa\n   * @param {Object} libConfig - Configuración de la librería\n   * @returns {Promise<void>}\n   */\n  static load(libConfig) {\n    return new Promise((resolve, reject) => {\n      // Verificar si ya está cargada\n      if (libConfig.checkLoaded && libConfig.checkLoaded()) {\n        resolve();\n        return;\n      }\n\n      const script = document.createElement('script');\n      script.src = libConfig.url;\n      \n      if (libConfig.integrity) {\n        script.integrity = libConfig.integrity;\n        script.crossOrigin = 'anonymous';\n      }\n      \n      script.onload = () => {\n        // Pequeño retraso para permitir que el script se inicialice\n        setTimeout(() => {\n          // Verificar que se cargó correctamente\n          if (libConfig.checkLoaded && !libConfig.checkLoaded()) {\n            reject(new Error(`Failed to load ${libConfig.url} - Check function returned false`));\n          } else {\n            resolve();\n          }\n        }, 100);\n      };\n      \n      script.onerror = (error) => {\n        reject(new Error(`Failed to load script: ${libConfig.url}`, { cause: error }));\n      };\n      \n      document.head.appendChild(script);\n    });\n  }\n\n  /**\n   * Carga múltiples librerías en orden\n   * @param {Array<Object>} libs - Lista de configuraciones\n   * @returns {Promise<void>}\n   */\n  static async loadAll(libs) {\n    for (const lib of libs) {\n      try {\n        await this.load(lib);\n      } catch (error) {\n        console.error(`Error loading script: ${lib.url}`, error);\n        throw error;\n      }\n    }\n  }\n}","import ScriptLoader from './utils/lib-loader.js';\n\n/**\n * Manages geometric elements with memory optimization.\n */\nexport default class GeometryManager {\n  \n  /**\n   * Initializes the GeometryManager with the map and configuration.\n   */\n  constructor(map, config) {\n    this.map = map;\n    this.config = config;\n    this.layerStore = new Map(); // Changed to Map instead of WeakMap\n    this.defaultIcon = L.icon({ \n      iconUrl: this.config.markerIconUrl,\n      iconSize: [25, 41],\n      iconAnchor: [12, 41],\n      popupAnchor: [1, -34]\n    });\n    // Reference for the WKT parser (will be loaded on demand)\n    this.wktParser = null;\n  }\n\n  /**\n   * Adds a marker to the map.\n   */\n  addMarker(latlng, options = {}) {\n    const marker = L.marker(latlng, {\n      icon: options.icon || this.defaultIcon,\n      ...options\n    });\n    \n    this.#addToStore(marker, 'marker');\n    return marker;\n  }\n\n  /**\n   * Parses and adds WKT geometry to the map.\n   */ \n  async addWkt(wktString) {\n    try {\n      // Load Terraformer only if necessary\n      if (!this.wktParser) {\n        this.wktParser = await this.#loadWktParser();\n      }\n      \n      const geoJson = this.wktParser.parse(wktString);\n      const layer = L.geoJSON(geoJson);\n      this.#addToStore(layer, 'wkt');\n      return layer;\n    } catch (error) {\n      console.error('WKT parse error:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Binds a popup to a given layer.\n   */ \n  bindPopup(layer, content) {\n    if (layer && content) {\n      layer.bindPopup(content);\n    }\n  }\n\n  /**\n   * Removes a specific layer from the map and the store.\n   */ \n  removeLayer(layer) {\n    if (layer && this.layerStore.has(layer)) {\n      this.map.removeLayer(layer);\n      this.layerStore.delete(layer);\n    }\n  }\n\n  /** \n   * Clears all managed layers from the map and the store.\n   */\n  clearLayers() {\n    this.layerStore.forEach((_, layer) => {\n      this.map.removeLayer(layer);\n    });\n    this.layerStore.clear();\n  }\n\n  /**\n   * Loads the WKT parser dynamically.\n   * @private\n   */\n  async #loadWktParser() {\n    try {\n      if (typeof window === 'undefined' || !window.Terraformer) {\n        await ScriptLoader.loadAll([\n          this.config.externalLibs.terraformer,\n          this.config.externalLibs.terraformerWkt\n        ]);\n      }\n\n      if (typeof window === 'undefined' || !window.Terraformer) {\n        throw new Error('Failed to load WKT parser after script loading');\n      }\n\n      this.wktParser = window.Terraformer.WKT;\n    } catch (error) {\n      console.error('Error loading WKT parser:', error);\n      throw error;\n    }\n  }\n\n  // async #loadWktParser() {\n  //   const terraformerConfig = {\n  //     url: this.config.externalLibs.terraformer.url,\n  //     integrity: this.config.externalLibs.terraformer.integrity,\n  //     checkLoaded: () => typeof window.Terraformer !== 'undefined'\n  //   };\n  //   const wktParserConfig = {\n  //     url: this.config.externalLibs.terraformerWkt.url,\n  //     integrity: this.config.externalLibs.terraformerWkt.integrity,\n  //     checkLoaded: () => typeof window.Terraformer?.WKT !== 'undefined'\n  //   };\n  //   const libsToLoad = [];\n    \n  //   if (!terraformerConfig.checkLoaded()) {\n  //     libsToLoad.push(terraformerConfig);\n  //   }\n    \n  //   if (!wktParserConfig.checkLoaded()) {\n  //     libsToLoad.push(wktParserConfig);\n  //   }\n  //   if (libsToLoad.length > 0) {\n  //     await ScriptLoader.loadAll(libsToLoad);\n  //   }\n  //   if (typeof window.Terraformer?.WKT === 'undefined') {\n  //     throw new Error('Failed to load WKT parser after script loading');\n  //   }\n  //   return window.Terraformer.WKT;\n  // }\n\n  /**\n   * Adds a layer to the store with metadata and to the map.\n   * @private\n   */ \n  #addToStore(layer, type) {\n    this.layerStore.set(layer, { type, addedAt: Date.now() });\n    layer.addTo(this.map);\n  }\n}","/**\n * Handles custom events and Livewire integration\n */\nexport default class EventManager {\n\n  constructor(config, mapContainer, eventBus) {\n    this.config = config;\n    this.mapContainer = mapContainer;\n    this.eventBus = eventBus;\n  }\n\n  /**\n   * Emit feature selected event\n   */\n  emitFeatureSelected(parcelaData, latlng) {\n    // Internal event bus\n    this.eventBus.emit('featureSelected', {\n      data: parcelaData,\n      coordinates: latlng\n    });\n    \n    // DOM event\n    const event = new CustomEvent('sigpac:featureSelected', {\n      detail: {\n        data: parcelaData,\n        coordinates: [latlng.lat, latlng.lng]\n      },\n      bubbles: true\n    });\n    \n    this.mapContainer.dispatchEvent(event);\n  }\n\n  /**\n   * Emit Livewire event if enabled\n   */\n  emitLivewireEvent(parcelaData, latlng) {\n    if (this.config.livewire && window.livewire) {\n      window.livewire.emit(\n        this.config.livewireEvent || 'sigpacFeatureSelected', \n        {\n          data: parcelaData,\n          coordinates: [latlng.lat, latlng.lng]\n        }\n      );\n    }\n  }\n}","import EventEmitter from './EventEmitter.js';\nimport Logger from './LogManager.js';\nimport SigpacService from './SigpacService.js';\nimport ConfigManager from './ConfigManager.js';\nimport LayerManager from './LayerManager.js';\nimport PopupManager from './PopupManager.js';\nimport GeometryManager from './GeometryManager.js';\nimport EventManager from './EventManager.js';\n\n/**\n * Core map management and coordination class\n */\nexport default class MapManager {\n\n  constructor(userConfig = {}) {\n    this.userConfig = userConfig;\n    this.eventBus = new EventEmitter();\n    //To cancel current request\n    this.currentAbortController = null;\n  }\n\n  /**\n   * Initialize map on target element\n   */\n  init(mapElement, customOptions = {}) {\n    if (typeof L === 'undefined') {\n      throw new Error('Leaflet not loaded');\n    }\n\n    // Initialize subsystems\n    this.#initConfig();\n    this.#initLogger();\n    this.#initMap(mapElement, customOptions);\n    this.#initSubsystems();\n    this.#setupEventHandlers();\n\n    this.logger.info('Leaflet map initialized');\n    return this.map;\n  }\n\n  /** \n   * Cleanup resources to prevent memory leaks \n   */\n  destroy() {\n    // Cancel any pending requests\n    if (this.currentAbortController) {\n      this.currentAbortController.abort();\n      this.currentAbortController = null;\n    }\n\n    // Clean event listeners\n    this.eventBus.offAll();\n    this.map.off();\n    this.map.remove();\n    \n    // Release references\n    this.subsystems = null;\n    this.logger.debug('MapManager destroyed');\n  }\n\n  /**\n   * Initialize configuration\n   * @private\n   */\n  #initConfig() {\n    this.configManager = new ConfigManager(this.userConfig);\n    this.config = this.configManager.getConfig();\n  }\n\n  /**\n   * Initialize logger\n   * @private\n   */\n  #initLogger() {\n    this.logger = new Logger(this.config.debug);\n  }\n\n  /**\n   * Initialize Leaflet map\n   * @private\n   */\n  #initMap(mapElement, customOptions) {\n    const options = { \n      ...this.config.defaultMapOptions, \n      ...customOptions \n    };\n    \n    this.map = L.map(mapElement, { attributionControl: false });\n    L.control.attribution({ position: 'bottomright' }).addTo(this.map);\n    this.map.setView(options.center, options.zoom);\n  }\n\n  /**\n   * Initialize subsystem managers\n   * @private\n   */\n  #initSubsystems() {\n    // Create GeometryManager first\n    this.geometryManager = new GeometryManager(this.map, this.config);\n    \n    // Create the other managers\n    this.layerManager = new LayerManager(this.config, this.map);\n    this.popupManager = new PopupManager(\n      this.map, \n      this.config, \n      this.geometryManager\n    );\n    this.eventManager = new EventManager(\n      this.config, \n      this.map.getContainer(),\n      this.eventBus\n    );\n    this.sigpacService = new SigpacService(this.config, this.logger);\n    \n    // Group subsystems\n    this.subsystems = {\n      geometryManager: this.geometryManager,\n      layerManager: this.layerManager,\n      popupManager: this.popupManager,\n      eventManager: this.eventManager,\n      sigpacService: this.sigpacService\n    };\n    \n    // Configure layers\n    this.layerManager.initBaseLayer(this.config.defaultMapOptions);\n    this.layerManager.initSigpacLayer();\n    \n    // Add SIGPAC layer only if the user did not provide initial features\n    if (!this.userConfig.hasOwnProperty('initialFeatures')) {\n      this.map.addLayer(this.layerManager.sigpacLayer);\n    }\n    \n    this.layerManager.setupLayerControl();\n    this.#processInitialFeatures();\n  }\n\n  /**\n   * Setup event handlers\n   * @private\n   */\n  #setupEventHandlers() {\n    if (this.config.clickEnabled === false) {\n      this.logger.info('Map click disabled');\n      return;\n    }\n    \n    // Use debounce to prevent rapid clicks\n    this.map.on('click', this.#debounce(\n      this.handleMapClick.bind(this), \n      300\n    ));\n    \n    // Listen to internal events\n    this.eventBus.on('featureSelected', (data) => {\n      this.logger.info('Feature selected', data);\n    });\n  }\n\n  /**\n   * Process initial features from config\n   * @private\n   */\n  #processInitialFeatures() {\n    if (Array.isArray(this.config.initialFeatures)) {\n      this.config.initialFeatures.forEach(feature => {\n        let layer;\n        if (feature.type === 'marker' && feature.coordinates) {\n          layer = this.geometryManager.addMarker(feature.coordinates);\n        } else if (feature.type === 'wkt' && feature.data) {\n          layer = this.geometryManager.addWkt(feature.data);\n        }\n\n        if (layer && feature.popupContent) {\n          this.geometryManager.bindPopup(layer, feature.popupContent);\n        }\n      });\n    }\n  }\n\n  /**\n   * Handle map click events\n   */\n  async handleMapClick(e) {\n    this.logger.debug('Map click detected', e.latlng);\n    \n    // Cancel previous request if it exists\n    if (this.currentAbortController) {\n      this.currentAbortController.abort();\n    }\n    \n    // Create new controller for cancellation\n    const abortController = new AbortController();\n    this.currentAbortController = abortController;\n    \n    // Verify the zoom level\n    if (this.map.getZoom() < this.config.minZoomFeature) {\n      this.popupManager.showErrorPopup(\n        e.latlng, \n        `Zoom in to level ${this.config.minZoomFeature}+ to view SIGPAC parcels`\n      );\n      return;\n    }\n    \n    // Add temporary marker immediately\n    const tempMarker = this.geometryManager.addMarker(e.latlng, {\n      title: 'Cargando datos SIGPAC...',\n      icon: this.config.markerLoadingIcon\n    });\n    \n    // For popup mode: show loading\n    if (this.config.interactionMode === 'popup') {\n      this.popupManager.showLoadingPopup(e.latlng);\n    }\n    \n    try {\n      // Get the SIGPAC data\n      const parcelaData = await this.sigpacService.fetchParcelaByCoordinates(\n        e.latlng,\n        { signal: abortController.signal }\n      );\n      \n      // Delete temporary marker (if the request was not canceled)\n      if (!abortController.signal.aborted) {\n        this.geometryManager.removeLayer(tempMarker);\n      }\n      \n      // Process the data\n      if (parcelaData) {\n        this.popupManager.showParcelaInfo(parcelaData, e.latlng);\n        this.eventManager.emitFeatureSelected(parcelaData, e.latlng);\n        this.eventManager.emitLivewireEvent(parcelaData, e.latlng);\n      } else {\n        this.popupManager.showErrorPopup(\n          e.latlng, \n          'No SIGPAC parcels found at this location'\n        );\n      }\n    } catch (error) {\n      // Do not handle errors if it was canceled\n      if (error.name === 'AbortError') {\n        this.logger.debug('Fetch aborted');\n        return;\n      }\n      \n      this.logger.error('Error handling map click', error);\n      \n      // Update time stamp to error state\n      tempMarker.setIcon(this.config.markerErrorIcon);\n      tempMarker.bindPopup(`<div class=\"sigpac-error\">${error.message || 'Error fetching data'}</div>`);\n      \n      // Show error popup (if we are in popup mode)\n      if (this.config.interactionMode === 'popup') {\n        this.popupManager.showErrorPopup(e.latlng, 'Error fetching parcel data');\n      }\n    }\n  }\n\n  /**\n   * Debounce function for events\n   * @private\n   */\n  #debounce(fn, delay) {\n    let timeoutId;\n    return (...args) => {\n      clearTimeout(timeoutId);\n      timeoutId = setTimeout(() => fn.apply(this, args), delay);\n    };\n  }\n}","import './assets/css/sigpac.css';\nimport MapManager from './core/MapManager.js';\nimport CoordinateCache from './core/CacheManager.js'; // Importar la clase\n\n// Run only in browser environment\nif (typeof window !== 'undefined') {\n\n  /**\n   * Library namespace attached to global window object\n   * Contains core components and initialization methods\n   */\n  const LeafletSigpac = {\n    MapManager,\n    CoordinateCache, // Exponer la clase\n    \n    //Auto-initializes maps on elements with data-sigpac-map attribute\n    autoInit: function() {\n      document.querySelectorAll('[data-sigpac-map]').forEach(element => {\n        try {\n          // Parse configuration from data attributes\n          const config = JSON.parse(element.dataset.config || '{}');\n          const options = JSON.parse(element.dataset.options || '{}');\n          \n          // Initialize map manager\n          const manager = new MapManager(config);\n          manager.init(element, options);\n        } catch (e) {\n          console.error(\n            'SIGPAC map initialization failed. Please check configuration format.',\n            e,\n            element\n          );\n        }\n      });\n    },\n    \n    /**\n     * Get manager instance by element\n     * @param {HTMLElement} element - Map container\n     * @returns {MapManager} Manager instance\n     */\n    getManager: function(element) {\n      return element.leafletSigpac?.manager;\n    }\n  };\n\n  // Merge with existing namespace if present\n  window.LeafletSigpac = Object.assign(window.LeafletSigpac || {}, LeafletSigpac);\n\n  // Auto-initialize maps when DOM is ready\n  document.addEventListener('DOMContentLoaded', () => {\n    if (window.LeafletSigpac.autoInit) {\n      window.LeafletSigpac.autoInit();\n    }\n  });\n}"],"names":["EventEmitter","constructor","this","events","Map","event","listener","has","set","Set","get","add","data","forEach","listeners","delete","size","offAll","clear","LOG_LEVELS","Logger","debug","currentLevel","level","includes","message","error","log","logFn","console","prefix","toUpperCase","shouldLog","indexOf","CoordinateCache","config","cache","accessOrder","latlng","key","entry","Date","now","timestamp","ttl","enabled","length","maxSize","lruKey","shift","generateKey","lat","toFixed","precision","lng","updateAccessOrder","push","removeFromAccessOrder","index","splice","SigpacService","logger","cacheConfig","info","cached","url","response","fetch","headers","Accept","signal","AbortSignal","timeout","ok","errorBody","text","Error","status","substring","json","processed","buildQueryUrl","lon","sigpacCoordinateQueryUrl","processResponse","Array","isArray","parseSigpacData","parcela","provincia","municipio","zona","poligono","recinto","uso","uso_sigpac","superficie","dn_surface","cultivo","pendiente","pendiente_media","regadio","coef_regadio","incidencias","admisibilidad","wkt","srid","calculateSurface","superficieValue","isNaN","defaultConfig","livewire","livewireEvent","sigpacWmsUrl","sigpacLayerName","minZoomFeature","defaultMapOptions","center","zoom","maxZoom","minZoom","tileUrl","attribution","externalLibs","terraformer","integrity","terraformerWkt","markerLoadingIcon","L","icon","iconUrl","iconSize","iconAnchor","popupAnchor","markerErrorIcon","hideLeafletAttribution","interactionMode","initialFeatures","popupFields","markerIconUrl","clickEnabled","ConfigManager","userConfig","getConfig","mergedConfig","topLevelMapOptions","LayerManager","map","options","baseLayer","tileLayer","addTo","initSigpacLayer","sigpacLayer","wms","layers","format","transparent","version","tileSize","opacity","setupLayerControl","control","SIGPAC","collapsed","setupAttribution","attributionControl","setPrefix","addAttribution","PopupManager","geometryManager","popupPool","closePopup","parcelaData","clearLayers","content","buildPopupContent","getFieldsConfig","field","label","value","suffix","join","fields","handleMarkerMode","marker","addMarker","title","bindPopup","createPopup","popup","pop","setLatLng","setContent","openOn","on","ScriptLoader","libConfig","Promise","resolve","reject","checkLoaded","script","document","createElement","src","crossOrigin","onload","setTimeout","onerror","cause","head","appendChild","libs","lib","load","GeometryManager","layerStore","defaultIcon","wktParser","wktString","geoJson","parse","layer","geoJSON","removeLayer","_","loadWktParser","window","Terraformer","loadAll","WKT","addToStore","type","addedAt","EventManager","mapContainer","eventBus","emit","coordinates","CustomEvent","detail","bubbles","dispatchEvent","MapManager","currentAbortController","mapElement","customOptions","destroy","abort","off","remove","subsystems","e","abortController","AbortController","getZoom","popupManager","showErrorPopup","tempMarker","showLoadingPopup","sigpacService","fetchParcelaByCoordinates","aborted","showParcelaInfo","eventManager","emitFeatureSelected","emitLivewireEvent","name","setIcon","initConfig","configManager","initLogger","initMap","position","setView","initSubsystems","layerManager","getContainer","initBaseLayer","hasOwnProperty","addLayer","setupEventHandlers","handleMapClick","bind","processInitialFeatures","feature","addWkt","popupContent","debounce","fn","delay","timeoutId","args","clearTimeout","apply","LeafletSigpac","autoInit","querySelectorAll","element","JSON","dataset","init","getManager","leafletSigpac","manager","Object","assign","addEventListener"],"mappings":"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"}